/**
 * The Malooch API
 * Auto genertaed Malooch API
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

    const ApiClient = require('../ApiClient'),
     RoutesDemandReportResponse = require('../model/RoutesDemandReportResponse'),
     ControllerErrorResponseSimple = require('../model/ControllerErrorResponseSimple'),
     NotAuthorized = require('../model/NotAuthorized'),
     RoutesExchangeReportResponse = require('../model/RoutesExchangeReportResponse'),
     RoutesLoginPayload = require('../model/RoutesLoginPayload'),
     RoutesResponseLoginOK = require('../model/RoutesResponseLoginOK'),
     ControllerNormalResponse = require('../model/ControllerNormalResponse'),
     RoutesRegistrationPayload = require('../model/RoutesRegistrationPayload');

  /**
   * Routes service.
   * @module api/RoutesApi
   * @version 1.0.0
   */

  /**
   * Constructs a new RoutesApi. 
   * @alias module:api/RoutesApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the reportDemandFromToGet operation.
     * @callback module:api/RoutesApi~reportDemandFromToGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RoutesDemandReportResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * demand report in system
     * @param {String} from 
     * @param {String} to 
     * @param {String} token the security token, get it from login route
     * @param {Object} opts Optional parameters
     * @param {String} opts.sort 
     * @param {Integer} opts.c  count per page
     * @param {Integer} opts.p  page number
     * @param {module:api/RoutesApi~reportDemandFromToGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RoutesDemandReportResponse}
     */
    this.reportDemandFromToGet = function(from, to, token, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'from' is set
      if (from == undefined || from == null) {
        throw new Error("Missing the required parameter 'from' when calling reportDemandFromToGet");
      }

      // verify the required parameter 'to' is set
      if (to == undefined || to == null) {
        throw new Error("Missing the required parameter 'to' when calling reportDemandFromToGet");
      }

      // verify the required parameter 'token' is set
      if (token == undefined || token == null) {
        throw new Error("Missing the required parameter 'token' when calling reportDemandFromToGet");
      }


      var pathParams = {
        'from': from,
        'to': to
      };
      var queryParams = {
        'sort': opts['sort'],
        'c': opts['c'],
        'p': opts['p']
      };
      var headerParams = {
        'token': token
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RoutesDemandReportResponse;

      return this.apiClient.callApi(
        '/report/demand/{from}/{to}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the reportExchangeFromToGet operation.
     * @callback module:api/RoutesApi~reportExchangeFromToGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RoutesExchangeReportResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * exchange report in system
     * @param {String} from 
     * @param {String} to 
     * @param {String} token the security token, get it from login route
     * @param {Object} opts Optional parameters
     * @param {String} opts.sort 
     * @param {Integer} opts.c  count per page
     * @param {Integer} opts.p  page number
     * @param {module:api/RoutesApi~reportExchangeFromToGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RoutesExchangeReportResponse}
     */
    this.reportExchangeFromToGet = function(from, to, token, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'from' is set
      if (from == undefined || from == null) {
        throw new Error("Missing the required parameter 'from' when calling reportExchangeFromToGet");
      }

      // verify the required parameter 'to' is set
      if (to == undefined || to == null) {
        throw new Error("Missing the required parameter 'to' when calling reportExchangeFromToGet");
      }

      // verify the required parameter 'token' is set
      if (token == undefined || token == null) {
        throw new Error("Missing the required parameter 'token' when calling reportExchangeFromToGet");
      }


      var pathParams = {
        'from': from,
        'to': to
      };
      var queryParams = {
        'sort': opts['sort'],
        'c': opts['c'],
        'p': opts['p']
      };
      var headerParams = {
        'token': token
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RoutesExchangeReportResponse;

      return this.apiClient.callApi(
        '/report/exchange/{from}/{to}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the reportSupplierFromToGet operation.
     * @callback module:api/RoutesApi~reportSupplierFromToGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RoutesDemandReportResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * supplier report in system
     * @param {String} from 
     * @param {String} to 
     * @param {String} token the security token, get it from login route
     * @param {Object} opts Optional parameters
     * @param {Integer} opts.c  count per page
     * @param {Integer} opts.p  page number
     * @param {String} opts.sort 
     * @param {module:api/RoutesApi~reportSupplierFromToGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RoutesDemandReportResponse}
     */
    this.reportSupplierFromToGet = function(from, to, token, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'from' is set
      if (from == undefined || from == null) {
        throw new Error("Missing the required parameter 'from' when calling reportSupplierFromToGet");
      }

      // verify the required parameter 'to' is set
      if (to == undefined || to == null) {
        throw new Error("Missing the required parameter 'to' when calling reportSupplierFromToGet");
      }

      // verify the required parameter 'token' is set
      if (token == undefined || token == null) {
        throw new Error("Missing the required parameter 'token' when calling reportSupplierFromToGet");
      }


      var pathParams = {
        'from': from,
        'to': to
      };
      var queryParams = {
        'c': opts['c'],
        'p': opts['p'],
        'sort': opts['sort']
      };
      var headerParams = {
        'token': token
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RoutesDemandReportResponse;

      return this.apiClient.callApi(
        '/report/supplier/{from}/{to}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userLoginPost operation.
     * @callback module:api/RoutesApi~userLoginPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RoutesResponseLoginOK} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * login user in system
     * @param {Object} opts Optional parameters
     * @param {module:model/RoutesLoginPayload} opts.payloadData 
     * @param {module:api/RoutesApi~userLoginPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RoutesResponseLoginOK}
     */
    this.userLoginPost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['payloadData'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RoutesResponseLoginOK;

      return this.apiClient.callApi(
        '/user/login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userLogoutGet operation.
     * @callback module:api/RoutesApi~userLogoutGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ControllerNormalResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * logout is for the logout from the system
     * @param {String} token the security token, get it from login route
     * @param {module:api/RoutesApi~userLogoutGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ControllerNormalResponse}
     */
    this.userLogoutGet = function(token, callback) {
      var postBody = null;

      // verify the required parameter 'token' is set
      if (token == undefined || token == null) {
        throw new Error("Missing the required parameter 'token' when calling userLogoutGet");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'token': token
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ControllerNormalResponse;

      return this.apiClient.callApi(
        '/user/logout', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the userRegisterPost operation.
     * @callback module:api/RoutesApi~userRegisterPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RoutesResponseLoginOK} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * login user in system
     * @param {Object} opts Optional parameters
     * @param {module:model/RoutesRegistrationPayload} opts.payloadData 
     * @param {module:api/RoutesApi~userRegisterPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RoutesResponseLoginOK}
     */
    this.userRegisterPost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['payloadData'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RoutesResponseLoginOK;

      return this.apiClient.callApi(
        '/user/register', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  module.exports = exports;
